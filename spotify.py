# -*- coding: utf-8 -*-
"""spotify.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jf3kP4r5DpWUUQljnCvCt7zz-L0AK6Gy
"""

import json
import keras
import tensorflow_probability as tfp
import tensorflow as tf
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy
from scipy import sparse
from keras import callbacks
import pickle

f = open('mpd.slice.0-999.json')
file = json.load(f)

playlists = []

for p in file['playlists']:
  playlist = []
  for track in p['tracks']:
    playlist.append(track['artist_name'] + " - " + track['track_name'])
  playlists.append(playlist)

i = 0
track_dict = {}
for p in playlists:
  for t in p:
    if t not in track_dict.keys():
      track_dict[t] = i
      i += 1

dict_size = i

playlists_tokenized = []

for p in playlists:
  playlist = []
  for t in p:
    playlist.append(track_dict[t])
  playlists_tokenized.append(playlist)

n_steps = 1
n_features = 1

data = []

for p in playlists_tokenized:
  for i in range(len(p) - n_steps):
    data.append([p[i], p[i+n_steps]])

df = pd.DataFrame(data, columns = ['Song', 'Next'])

X_train, X_test, y_train, y_test = train_test_split(df["Song"], df["Next"], test_size=0.20, random_state=42)

y_test = tf.cast(y_test, tf.float32)
y_train = tf.cast(y_train, tf.float32)

model = tf.keras.Sequential()
model.add(keras.layers.LSTM(50, activation='relu', input_shape=(n_steps, n_features)))
model.add(keras.layers.Dense(1))

model.compile(
    optimizer=tf.keras.optimizers.Adam(0.01), 
    loss=tf.keras.losses.MeanSquaredError(), 
    metrics=[keras.metrics.RootMeanSquaredError(), keras.metrics.MeanAbsoluteError(), keras.metrics.MeanSquaredError()],
)

history = model.fit(X_train, y_train, epochs=150, verbose=1, validation_data=(X_test, y_test))

history.history.keys()

plt.plot(history.history['root_mean_squared_error'])
plt.plot(history.history['val_root_mean_squared_error'])
plt.title('RMSE')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
plt.plot(history.history['mean_absolute_error'])
plt.plot(history.history['val_mean_absolute_error'])
plt.title('MAE')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
plt.plot(history.history['mean_squared_error'])
plt.plot(history.history['val_mean_squared_error'])
plt.title('MSE')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()